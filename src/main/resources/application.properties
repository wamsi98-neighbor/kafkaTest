
server.address=localhost
server.port=8080

# API 호출시, SQL 문을 콘솔에 출력한다.
spring.jpa.show-sql=true

# DDL 정의시 데이터베이스의 고유 기능을 사용합니다.
# ex) 테이블 생성, 삭제 등
spring.jpa.generate-ddl=true

# spring.jpa.database=mysql
spring.jpa.database=mysql

# MySQL 설정
spring.datasource.url=jdbc:mysql://localhost:3306/simpleBoard?&useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&serverTimezone=UTC
spring.datasource.username=wamsi
spring.datasource.password=0617
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


############################## Kafka ##############################

# 카프카서버 정보, 기본적으로 9092 포트를 사용한다.
spring.kafka.bootstrap-servers=localhost:9092
# 컨슈머의 그룹id
spring.kafka.consumer.group-id=kafka-demo
# 데이터를 어디까지 읽었다는 offset을 주기적으로 저장할지 여부
spring.kafka.consumer.enable-auto-commit=true
# ffset에 오류가 있을 경우 어디서부터 다시 할지 여부 / ealiest - 맨처음부터 다시 읽는다 , latest - 이전꺼는 무시, 이제 들어오는 데이터부터 읽기 시작한다
spring.kafka.consumer.auto-offset-reset=latest
# 데이터를 kafka로 전달할때 사용하는 Key Encoder ClassStringSerializer는 문자열 형태의 데이터에만 사용 가능
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# 데이터를 kafka에서 받아서 사용하는 Key Decoder ClassStringDeserializer는 문자열 형태의 데이터에만 사용 가능
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# 데이터를 kafka로 전달할때 사용하는 Value Encoder ClassStringSerializer는 문자열 형태의 데이터에만 사용 가능
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# 데이터를 kafka에서 받아서 사용하는 Value Decoder ClassStringDeserializer는 문자열 형태의 데이터에만 사용 가능
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# consumer가 한번에 가져오는 message 갯수
spring.kafka.consumer.max-poll-records=1000
# 기본 설정 topic name
spring.kafka.template.default-topic=kafka-demo